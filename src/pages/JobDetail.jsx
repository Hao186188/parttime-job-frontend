import React, { useState, useEffect } from 'react';
import { useParams, Link, useNavigate } from 'react-router-dom';
import { useAuth } from '../context/AuthContext';
import Header from '../components/Header';
import Footer from '../components/Footer';
import JobCard from '../components/JobCard';
import './JobDetail.css';
import apiService from '../services/api';

function JobDetail() {
  const { id } = useParams();
  const navigate = useNavigate();
  const { user } = useAuth();
  const [job, setJob] = useState(null);
  const [similarJobs, setSimilarJobs] = useState([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState('');

  useEffect(() => {
    loadJobDetail();
  }, [id]);

  const loadJobDetail = async () => {
    try {
      setLoading(true);
      const response = await apiService.getJob(id);
      setJob(response.data.job);
      loadSimilarJobs(response.data.job);
    } catch (error) {
      console.error('Error loading job detail:', error);
      setError('Kh√¥ng th·ªÉ t·∫£i th√¥ng tin c√¥ng vi·ªác');
    } finally {
      setLoading(false);
    }
  };

  const loadSimilarJobs = async (currentJob) => {
    try {
      const response = await apiService.getJobs({
        category: currentJob.category,
        location: currentJob.location,
        limit: 3
      });
      // Filter out current job
      const filteredJobs = response.data.jobs.filter(j => j._id !== currentJob._id);
      setSimilarJobs(filteredJobs.slice(0, 3));
    } catch (error) {
      console.error('Error loading similar jobs:', error);
    }
  };

  const handleApply = async () => {
    if (!user) {
      navigate('/login?redirect=' + window.location.pathname);
      return;
    }

    try {
      await apiService.applyForJob({
        jobId: job._id,
        coverLetter: `T√¥i quan t√¢m ƒë·∫øn v·ªã tr√≠ ${job.title} t·∫°i ${job.company?.name}`
      });
      alert('·ª®ng tuy·ªÉn th√†nh c√¥ng! Nh√† tuy·ªÉn d·ª•ng s·∫Ω li√™n h·ªá v·ªõi b·∫°n s·ªõm.');
    } catch (error) {
      console.error('Application error:', error);
      alert(error.message || '·ª®ng tuy·ªÉn th·∫•t b·∫°i. Vui l√≤ng th·ª≠ l·∫°i.');
    }
  };

  const handleSaveJob = async () => {
    if (!user) {
      navigate('/login?redirect=' + window.location.pathname);
      return;
    }

    try {
      await apiService.saveJob(job._id);
      alert('ƒê√£ l∆∞u vi·ªác l√†m th√†nh c√¥ng!');
    } catch (error) {
      console.error('Save job error:', error);
      alert(error.message || 'L∆∞u vi·ªác l√†m th·∫•t b·∫°i.');
    }
  };

  const handleShare = () => {
    const jobUrl = window.location.href;
    navigator.clipboard.writeText(jobUrl).then(() => {
      alert('ƒê√£ copy link chia s·∫ª v√†o clipboard!');
    }).catch(() => {
      // Fallback
      const tempInput = document.createElement('input');
      tempInput.value = jobUrl;
      document.body.appendChild(tempInput);
      tempInput.select();
      document.execCommand('copy');
      document.body.removeChild(tempInput);
      alert('ƒê√£ copy link chia s·∫ª!');
    });
  };

  if (loading) {
    return (
      <div className="job-detail-page">
        <Header />
        <div className="loading">
          <div className="loading-spinner"></div>
          <p>ƒêang t·∫£i th√¥ng tin c√¥ng vi·ªác...</p>
        </div>
        <Footer />
      </div>
    );
  }

  if (error || !job) {
    return (
      <div className="job-detail-page">
        <Header />
        <div className="error-state">
          <div className="error-icon">‚ùå</div>
          <h3>{error || 'Kh√¥ng t√¨m th·∫•y c√¥ng vi·ªác'}</h3>
          <p>C√¥ng vi·ªác kh√¥ng t·ªìn t·∫°i ho·∫∑c ƒë√£ b·ªã x√≥a.</p>
          <Link to="/jobs" className="btn-primary">Quay l·∫°i danh s√°ch vi·ªác l√†m</Link>
        </div>
        <Footer />
      </div>
    );
  }

  return (
    <div className="job-detail-page">
      <Header />
      
      <section className="job-detail">
        <div className="container">
          <div className="job-detail-content">
            {/* Main Content */}
            <div className="job-main">
              <div className="breadcrumb">
                <Link to="/">Trang ch·ªß</Link> &gt;
                <Link to="/jobs">T√¨m vi·ªác</Link> &gt;
                <span>{job.title}</span>
              </div>
              
              <div className="job-header-detail">
                <div className="job-title-section">
                  <h1>{job.title}</h1>
                  <div className="job-company-detail">{job.company?.name}</div>
                  <div className="job-meta-detail">
                    <span className="job-location">üìç {job.location}</span>
                    <span className="job-salary">üí∞ {job.salary}</span>
                    <span className="job-type">üïí {job.jobType}</span>
                    <span className="job-posted">
                      üìÖ {new Date(job.createdAt).toLocaleDateString('vi-VN')}
                    </span>
                  </div>
                </div>
                <div className="job-actions-detail">
                  <button className="btn-apply-main" onClick={handleApply}>
                    ·ª®ng tuy·ªÉn ngay
                  </button>
                  <button className="btn-save-job" onClick={handleSaveJob}>
                    üíö L∆∞u vi·ªác l√†m
                  </button>
                  <button className="btn-share-job" onClick={handleShare}>
                    üì§ Chia s·∫ª
                  </button>
                </div>
              </div>
              
              <div className="job-content">
                <div className="content-section">
                  <h3>üìù M√¥ t·∫£ c√¥ng vi·ªác</h3>
                  <div className="content-text">
                    {job.description || 'Ch∆∞a c√≥ m√¥ t·∫£ chi ti·∫øt.'}
                  </div>
                </div>
                
                {job.requirements && (
                  <div className="content-section">
                    <h3>‚úÖ Y√™u c·∫ßu c√¥ng vi·ªác</h3>
                    <div className="content-text">{job.requirements}</div>
                  </div>
                )}
                
                {job.benefits && (
                  <div className="content-section">
                    <h3>üéÅ Quy·ªÅn l·ª£i</h3>
                    <div className="content-text">{job.benefits}</div>
                  </div>
                )}
                
                <div className="content-section">
                  <h3>üè¢ V·ªÅ c√¥ng ty</h3>
                  <div className="company-info">
                    <div className="company-name">{job.company?.name}</div>
                    <div className="company-contact">
                      üìß {job.contactEmail || job.company?.email}
                      {job.contactPhone && ` ‚Ä¢ üìû ${job.contactPhone}`}
                    </div>
                  </div>
                </div>
              </div>
            </div>
            
            {/* Sidebar */}
            <div className="job-sidebar">
              <div className="sidebar-widget company-widget">
                <h3>Th√¥ng tin tuy·ªÉn d·ª•ng</h3>
                <div className="info-list">
                  <div className="info-item">
                    <strong>üìç ƒê·ªãa ƒëi·ªÉm:</strong>
                    <span>{job.location}</span>
                  </div>
                  <div className="info-item">
                    <strong>üí∞ M·ª©c l∆∞∆°ng:</strong>
                    <span>{job.salary}</span>
                  </div>
                  <div className="info-item">
                    <strong>üïí Lo·∫°i h√¨nh:</strong>
                    <span>{job.jobType}</span>
                  </div>
                  <div className="info-item">
                    <strong>üìÖ ƒê√£ ƒëƒÉng:</strong>
                    <span>{new Date(job.createdAt).toLocaleDateString('vi-VN')}</span>
                  </div>
                  <div className="info-item">
                    <strong>üë• H·∫°n n·ªôp:</strong>
                    <span>
                      {job.applicationDeadline 
                        ? new Date(job.applicationDeadline).toLocaleDateString('vi-VN')
                        : 'Kh√¥ng x√°c ƒë·ªãnh'
                      }
                    </span>
                  </div>
                </div>
              </div>
              
              <div className="sidebar-widget">
                <h3>Vi·ªác l√†m t∆∞∆°ng t·ª±</h3>
                <div className="similar-jobs">
                  {similarJobs.length > 0 ? (
                    similarJobs.map(similarJob => (
                      <JobCard key={similarJob._id} job={similarJob} compact={true} />
                    ))
                  ) : (
                    <p className="no-similar-jobs">Kh√¥ng c√≥ vi·ªác l√†m t∆∞∆°ng t·ª±</p>
                  )}
                </div>
              </div>
              
              <div className="sidebar-widget safety-widget">
                <h3>‚ö†Ô∏è L∆∞u √Ω an to√†n</h3>
                <div className="safety-tips">
                  <p>‚Ä¢ Kh√¥ng ·ª©ng tr∆∞·ªõc ti·ªÅn</p>
                  <p>‚Ä¢ G·∫∑p m·∫∑t t·∫°i n∆°i c√¥ng c·ªông</p>
                  <p>‚Ä¢ X√°c minh th√¥ng tin c√¥ng ty</p>
                  <p>‚Ä¢ B√°o c√°o vi·ªác l√†m ƒë√°ng ng·ªù</p>
                </div>
              </div>
            </div>
          </div>
        </div>
      </section>

      <Footer />
    </div>
  );
}

export default JobDetail;